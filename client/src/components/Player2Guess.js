import React, { useState } from 'react';

function Player2Guess({ hints, guessType, guessWord, guessSentence, gameStatus, resetGame, updateGameStatus, roomId }) {
  const [typeGuess, setTypeGuess] = useState('');
  const [wordGuess, setWordGuess] = useState('');
  const [sentenceGuess, setSentenceGuess] = useState('');
  const [message, setMessage] = useState('');
  const [typeGuessed, setTypeGuessed] = useState(false);

  const handleTypeGuess = async () => {
    try {
      const result = await guessType(typeGuess);
      setMessage(result.isCorrect ? '–¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–≥–∞–¥–∞–Ω–æ –≤–µ—Ä–Ω–æ!' : '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.');
      if (result.isCorrect) setTypeGuessed(true);
    } catch (error) {
      console.error('Error guessing type:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.');
    }
  };

  const handleWordGuess = async () => {
    try {
      await guessWord(wordGuess);
      setWordGuess('');
      await updateGameStatus();
    } catch (error) {
      console.error('Error guessing word:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ–≤–∞.');
    }
  };

  const handleSentenceGuess = async () => {
    try {
      if (!roomId) {
        console.error('roomId is not provided in handleSentenceGuess');
        setMessage('–û—à–∏–±–∫–∞: ID –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
        return;
      }
      if (!sentenceGuess) {
        console.error('sentenceGuess is empty');
        setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.');
        return;
      }
      console.log('Sending guessSentence request:', { sentence: sentenceGuess, roomId });
      const result = await guessSentence(sentenceGuess);
      if (result.error) {
        console.error('Server error:', result.error);
        setMessage(`–û—à–∏–±–∫–∞: ${result.error}`);
        if (result.error.includes('Room')) {
          setMessage('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
        }
      } else if (result.isCorrect) {
        setMessage('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–≥–∞–¥–∞–Ω–æ –≤–µ—Ä–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!');
      } else {
        setMessage('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–≥–∞–¥–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—ã—Ç–∞—Ç—å—Å—è!');
      }
      setSentenceGuess('');
      await updateGameStatus();
    } catch (error) {
      console.error('Error guessing sentence:', error);
      setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  };

  if (gameStatus.isGameOver) {
    return (
      <div className="max-w-md mx-auto bg-white shadow-lg rounded-lg p-6 text-center">
        <h2 className="text-2xl font-bold mb-4">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ</h2>
        <p className="mb-4">–í—ã —É–≥–∞–¥–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ò–≥—Ä–æ–∫–∞ 1! –ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë".</p>
        <button
          onClick={resetGame}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          –°—ã–≥—Ä–∞—Ç—å –µ—â—ë
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-col md:flex-row gap-6 p-4 max-w-4xl mx-auto">
      <div className="flex-1 bg-white shadow-lg rounded-lg p-6">
        <h2 className="text-2xl font-bold mb-4">–ò–≥—Ä–æ–∫ 2: –£–≥–∞–¥–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h2>
        {!typeGuessed ? (
          <div className="mb-4">
            <label className="block text-lg mb-2">–£–≥–∞–¥–∞–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</label>
            <select
              value={typeGuess}
              onChange={(e) => setTypeGuess(e.target.value)}
              className="border rounded p-2 w-full mb-2"
            >
              <option value="">–í—ã–±–µ—Ä–∏ —Ç–∏–ø</option>
              <option value="—É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–µ">–£—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–µ</option>
              <option value="–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ">–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ</option>
              <option value="–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ">–í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ</option>
            </select>
            <button
              onClick={handleTypeGuess}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              –£–≥–∞–¥–∞—Ç—å —Ç–∏–ø
            </button>
          </div>
        ) : (
          <div>
            {message && <p className="text-green-600 mb-4">{message}</p>}
            <div className="mb-4">
              <label className="block text-lg mb-2">–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:</label>
              <input
                type="text"
                value={wordGuess}
                onChange={(e) => setWordGuess(e.target.value)}
                placeholder="–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ"
                className="border rounded p-2 w-full mb-2"
              />
              <button
                onClick={handleWordGuess}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                –£–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ
              </button>
            </div>
            <div className="mb-4">
              <label className="block text-lg mb-2">–£–≥–∞–¥–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</label>
              <input
                type="text"
                value={sentenceGuess}
                onChange={(e) => setSentenceGuess(e.target.value)}
                placeholder="–í–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                className="border rounded p-2 w-full mb-2"
              />
              <button
                onClick={handleSentenceGuess}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                –£–≥–∞–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
              </button>
            </div>
            {message && !gameStatus.isGameOver && (
              <p className={message.includes('–≤–µ—Ä–Ω–æ') ? 'text-green-600' : 'text-red-600'}>{message}</p>
            )}
          </div>
        )}
      </div>
      <div className="w-full md:w-1/3 bg-white shadow-lg rounded-lg p-6">
        <div className="mb-6">
          <h3 className="text-xl font-semibold mb-2">–ü–æ–¥—Å–∫–∞–∑–∫–∏:</h3>
          <ul className="list-disc pl-5">
            {hints.map((hint, index) => (
              <li key={`hint-${index}`} className="mb-1">{hint}</li>
            ))}
          </ul>
        </div>
        <div>
          <h3 className="text-xl font-semibold mb-2">–£–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</h3>
          <ul className="list-disc pl-5">
            {gameStatus.guessedWords.map((word, index) => (
              <li key={`guessed-${word}-${index}`} className="mb-1">{word}</li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}

export default Player2Guess;